/// <reference types="node" />
import { EventEmitter } from "events";
import { Message, BaseMessage, ModelDetailsMessage, UserDetailsMessage, SessionDetailsMessage } from "./sMessages";
export declare class Model implements EventEmitter {
    uid: number;
    nm: string;
    tags: string[];
    private knownSessions;
    addListener: (event: string, listener: ModelEventCallback) => this;
    on: (event: string, listener: ModelEventCallback) => this;
    once: (event: string, listener: ModelEventCallback) => this;
    prependListener: (event: string, listener: ModelEventCallback) => this;
    prependOnceListener: (event: string, listener: ModelEventCallback) => this;
    removeListener: (event: string, listener: ModelEventCallback) => this;
    removeAllListeners: (event?: string) => this;
    getMaxListeners: () => number;
    setMaxListeners: (n: number) => this;
    listeners: (event: string) => ModelEventCallback[];
    emit: (event: string, ...args: any[]) => boolean;
    eventNames: () => string[];
    listenerCount: (type: string) => number;
    private static eventsForAllModels;
    static addListener: (event: string, listener: ModelEventCallback) => void;
    static on: (event: string, listener: ModelEventCallback) => void;
    static once: (event: string, listener: ModelEventCallback) => void;
    static prependListener: (event: string, listener: ModelEventCallback) => void;
    static prependOnceListener: (event: string, listener: ModelEventCallback) => void;
    static removeListener: (event: string, listener: ModelEventCallback) => void;
    static removeAllListeners: (event?: string | symbol | undefined) => EventEmitter;
    static getMaxListeners: () => number;
    static setMaxListeners: (n: number) => EventEmitter;
    static listeners: (event: string) => ModelEventCallback[];
    static emit: (event: string | symbol, ...args: any[]) => boolean;
    static eventNames: () => (string | symbol)[];
    static listenerCount: (type: string | symbol) => number;
    private static knownModels;
    constructor(uid: number);
    static getModel(id: string | number, createIfNecessary?: boolean): Model | undefined;
    static findModels(filter: (model: Model) => boolean): Model[];
    readonly bestSessionId: number;
    readonly bestSession: ModelSessionDetails;
    mergeTags(newTags: string[]): void;
    merge(msg: Message): void;
    private purgeOldSessions();
    reset(): void;
    static reset(): void;
    private static whenMap;
    static when(condition: whenFilter, onTrue: whenCallback, onFalseAfterTrue?: whenCallback): void;
    static removeWhen(condition: (m: Model) => boolean): boolean;
    private whenMap;
    when(condition: whenFilter, onTrue: whenCallback, onFalseAfterTrue?: whenCallback): void;
    removeWhen(condition: (m: Model) => boolean): boolean;
    private processWhens(payload?);
    toString(): string;
}
export declare type ModelEventCallback = (model: Model, before: number | string | string[] | boolean, after: number | string | string[] | boolean) => void;
export declare type whenFilter = (m: Model) => boolean;
export declare type whenCallback = (m: Model, p?: Message | string[]) => void;
export interface ModelSessionDetails extends BaseMessage, ModelDetailsMessage, UserDetailsMessage, SessionDetailsMessage {
    model_sw?: number;
    truepvt?: number;
    guests_muted?: number;
    basics_muted?: number;
    [index: string]: number | string | boolean | undefined;
}
